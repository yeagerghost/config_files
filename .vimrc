syntax on
set hlsearch
colorscheme koehler
vnoremap <C-c> "+y

set directory+=C:\Users\kmcneil.ADAXSCOM\Tempstuff\VIMTEMP

let mapleader = ","

map <Leader>co :call COrders()<CR>
map <Leader>i :call InvJournal()<CR>
map <Leader>op :call GenOpens()<CR>
map <Leader>da :%d<CR>
map <Leader>d :1,$t$<CR>
map <Leader>ane /A$AP Ferg & Tory Lanez WME Counts.*\\|Chrisette Michele Agent Counts.*\\|Dawes Agent Counts.*\\|Jim Breuer Counts.*\\|Josh Ritter Jamplify Counts.*\\|Magic Men Counts.*\\|MattyB AEG Audit.*\\|MattyB Agent Counts.*\\|Pete Davidson Agency Afternoon Counts.*\\|Pete Davidson Agency Morning Counts.*\\|PressPlayDetroit Agent Count.*\\|PressPlayDetroit Audit.*\\|RuPaul NYC Counts.*\\|RuPaul VIP Audit.*\\|Sturgill Simpson Agent Counts.*\\|Tegan and Sara Agent Counts.*\\|Todrick Hall Agent Counts.*

" Used after copy and pasting current outbox versions from Nagios web into VIM.  This will then
" Generate the relevant lines to be added to the outbox-versions.conf file on Nagios server
" let @a=':%s/^.*Outbox-Versions_//g
":%s/\t.*got /=/g
":%s/ (.*$//g
":%s/\t.*$/=/g
":%s/invlib4/invserve/g
":%s/kjgjhgjhgjhgj//g
"'
function OBversions()
  :%s/^.*Outbox-Versions_//g
  :%s/\t.*got /=/g
  :%s/ (.*$//g
  :%s/\t.*$/=/g
  :%s/invlib4/invserve/g
endfunction

function Sqline()
  :%s/^/'/g
  :%s/\n/',/g
  :%s/,$//g
endfunction

" Recapcha requests with ISS codes on single lines
" Replace newlines from line 1 to second to last line with commas
function Cappify()
   :1,$-1s/\n/,/g
endfunction

" Convert url to ISS Code
" ISS code comes between waiting room like so wr=<ISS CODE>&SOMEETHING
" Cut out wr=ISS CODE&
" Then Delete wr= and &
function Url2Wr()
  :%s/.*/&\rxXxXxXxXxX&
  :$s/$/\r==========STARTISS==========
  :g/^xXxXxXxXxX.*/m$
  :$s/$/\r==========ENDISS==========
  :%g/^$/d
  :/==STARTISS==/,/==ENDISS==/s/.*\(wr=.*&\).*/\1/g
  :/==STARTISS==/,/==ENDISS==/s/&.*//g
  :/==STARTISS==/,/==ENDISS==/s/wr=//g
endfunction

"  Assumes buffer contains erroneous output of test-events ran on bfox server
"  Function then generates the first select statements call the TMSales function
"  Next the function duplicates the select separated START and END sections.
"  This is used as a base to create necessary queries or other need scripts
"  SECTIONNAME and END-SECTIONNAME used because when using <SECTIONNAME> and <ENDSECTIONNAME>
"  SECTIONNAME is a substring of ENDSECTIONNAME which leads to problems
function InvJournal()
  :call TMSales()
  :1s/^.*/===========================START===========================\r&/
  :$s/^.*/&\r===========================END===========================/
  :/==START==/,/==END==/g/.*/t$ " Use /<range start>/,/<range end>/g/<pattern>/t$ to place contents between range at end of file 
  :/==START==/,/==END==/g/.*/t$  
  :/==START==/,/==END==/g/.*/t$  
  :/==START==/,/==END==/g/.*/t$
  :%s/^=.*END.*/&\r\r/
  /START
  :s/START/TMSALES/
  /END
  :s/END/END-TM-SALES/
  /START
  :s/START/ITEMSEATS/
  /END
  :s/END/END-ITEM-SEATS/
  /START
  :s/START/GETINVSEATS/
  /END
  :s/END/END-GET-INVSEATS/
  /START
  :s/START/SINVSEATS/
  /END
  :s/END/END-SINV-SEATS/
  /START
  :s/START/GENOPENS/
  /END
  :s/END/END-GEN-OPENS/
  :call SItemSeats()
  :call GetInvseats()
  :call SInvseats()
  :/GENOPENS/+1,/END-GEN-OPENS/-1s/union/order by journalkey/g
  :$s/\n/\rvi test; chmod 700 test; .\/test; cut -f 3 -d ',' seats_in_question; cut -f 5 -d ',' seats_in_question\r\rvi open-seats; importinv.py inv open-seats;\/opt\/outbox\/nagios-active-plugins\/bin\/run-nagios-active-plugin obt_check_jmon.py -c 60 test-events\r/
endfunction

" Assumes buffer contains select * from customerorder where orderkey in ('list','of','orderkeys')
" Function then creates a grep to search for those orderkeys from a list of results previously generated
" By function GenInvseats
function SOrders()
  :%s/^select.*in/grep -Ew/g
  :%s/'//g
  :%s/(/'/g
  :%s/)/'/g
  :%s/,/|/g
endfunction

" Assumes the buffer contains orderkeys on separate lines with possible duplicates
" Function then generates select * from customerorder for the orderkeys
function COrders()
  :sort u
  :%g/^0$/d
  :%s/^/'/g
  :%s/\n/',/g
  :%s/,$//g
  :%s/^/select * from customerorder where orderkey in (/g
  :%s/$/)/g
endfunction

" Assumes buffer contains select * from invjournal where prodcode='XXX' and seat in ('seat','list') union <journalkey number>
" All execept journalkey number is actually generated by the function MSales()
" Fucntion then generates the SQL statement to open the seats which will be used by importinv
"function GenOpens()
"  :%s/select \* /select prodCode, seat, oldRest, 0, 'OPEN' /g
"  :%s/union/and journalkey >= /g
"  :%s/order by journalkey/and journalkey >= /g
"  :1,$-1s/$/ union/
"endfunction
function GenOpens()
  :/GENOPENS/+1,/END-GEN-OPENS/-1s/select \* /select prodCode, seat, oldRest, 0, 'OPEN' /g
  :/GENOPENS/+1,/END-GEN-OPENS/-1s/order by journalkey/and journalkey >= /g
  :/GENOPENS/+1,/END-GEN-OPENS/-2s/$/ union/
endfunction

" Assumes buffer contains select * from invjournal where prodcode='XXX' and seat in ('seat','list') union 
" Function changes the query to be on itemseat instead of invjournal
function SItemSeats()
  :/ITEMSEATS/+1,/END-ITEM-SEATS/-1s/invjournal/itemseat/g
  :/ITEMSEATS/+1,/END-ITEM-SEATS/-1s/prodcode/eventcode/g
  :/ITEMSEATS/+1,/END-ITEM-SEATS/-1s/journalkey/itemseatkey/g
endfunction


" Assumes buffer contains select * from invjournal where prodcode='<prodcode>' and seat in ('seat','list') union 
" Function then generates a bash script to to do an invseats CSV file so that orderkeys can be checked against seats
function GetInvseats()
  :/GETINVSEATS/+1,/END-GET-INVSEATS/-1s/^.*prodcode='//g
  :/GETINVSEATS/+1,/END-GET-INVSEATS/-1s/'.*$//g
  :/GETINVSEATS/+1,/END-GET-INVSEATS/-2s/\n/ /g
  :/GETINVSEATS/+1,/END-GET-INVSEATS/-1s/^/for arg in /g 
  :/GETINVSEATS/+1,/END-GET-INVSEATS/-1s/$/; do invseats.py inv -fcsv $arg > $arg.seats; done
endfunction


" Assumes buffer contains select * from invjournal where prodcode='<prodcode>' and seat in ('seat','list') union 
" Swapping around certain search results =====> :%s/\(prodcode=.*' *and\)\(.*$\)/\2 \1/g <======  Oriely Sed and Awk pg 84
" Function (search inv seats) then generates a bash script to grep for the seats from CSV file generated by GetInvseats
function SInvseats()
  :/SINVSEATS/+1,/END-SINV-SEATS/-1s/).*$/)/g
  :/SINVSEATS/+1,/END-SINV-SEATS/-1s/\(prodcode=.*' *and\)\(.*$\)/\2 \1/g
  :/SINVSEATS/+1,/END-SINV-SEATS/-1s/'//g
  :/SINVSEATS/+1,/END-SINV-SEATS/-1s/ *and$//g
  :/SINVSEATS/+1,/END-SINV-SEATS/-1s/^.*select.*in/grep -Ew
  :/SINVSEATS/+1,/END-SINV-SEATS/-1s/(/'/g
  :/SINVSEATS/+1,/END-SINV-SEATS/-1s/)/'/g
  :/SINVSEATS/+1,/END-SINV-SEATS/-1s/, /|/g
  :/SINVSEATS/+1,/END-SINV-SEATS/-1s/prodcode=//g
  :/SINVSEATS/+1,/END-SINV-SEATS/-1s/$/.seats/g
  :/SINVSEATS/s/.*/&\r{/
  :/END-SINV-SEATS/s/.*/} > seats_in_question\r&/
endfunction

" Assumes the buffer contains the output from a freshdesk test events for missing sales
" Function then geneates SQL select * from invjoural for the appropriate seats and events
function MSales()
  :%s/uFAIL/\r&/g
  :g!/^uFAIL/d
  :%s/INVENTORY.*$//g
  :%s/uFAIL.*in /select * from invjournal where prodcode='/g
  :%s/: uMissing sales: DB([0-9]\{1,3})/' and seat in /g
  :%s/\[/('/g
  :%s/\]/')/g
  :%s/, /', '/g
  :1,$-1s/$/union/g
  :$s/$/order by journalkey
endfunction


" Assumes the buffer contains the output from a Nagios test events for missing sales
" Function then geneates SQL select * from invjoural for the appropriate seats and events
function NMSales()
  :%s/u'FAIL/\r&/g
  :g!/^u'FAIL/d
  :%s/INVENTORY.*$//g
  :%s/u'FAIL.*in /select * from invjournal where prodcode='/g
  :%s/: u"Missing sales: DB([0-9]\{1,3})/ and seat in /g
  :%s/\[/(/g
  :%s/\]/)/g
  :1,$-1s/$/union/g
  :$s/$/order by journalkey
endfunction


" Assumes the buffer contains the output from a Test event run manually for missing sales
" Function then geneates SQL select * from invjoural for the appropriate seats and events
function TMSales()
  :%s/^FAIL:.*in /select * from invjournal where prodcode='
  :%s/^select .*/&' /g
  :g!/^select \*.*$\|^AssertionError/d
  :%s/INVENTORY.*/XXXXXXXX /g
  :%s/\n//g
  :%s/ XXXXXXXX/\r/g
  :%g/^.$/d
  :%s/AssertionError: Missing sales: DB([0-9]\{1,3})/ and seat in /g
  :%s/AssertionError: Missing reservations: DB([0-9]\{1,3})/ and seat in /g
  :%s/\[/(/g
  :%s/\]/)/g
  :1,$-1s/$/ union/g
  :$s/$/ order by journalkey
endfunction


"  Assumes the buffer contains the failure from sftp or ftp logs in the form of
"  Date - Info - Uploading file <localfile> to <remotefile>
"  Function attempts to break down input into lcd, cd and put commands for batch processing
function TSftp ()
  :%s/^.*Uploading /Uploading /g
  :%s/ to /\r/g
  :%s/^Uploading.*$/\r&/g
  :%s/\/AEG_.*/\r&/g
  :%s/\/Prod.*/\r&/g
  :%s/^\///g
  :%s/'sftp.*22/&\r/g
  :%s/'ftp.*21/&\r/g
  :%s/^Uploading file '/lcd '/g
  :%s/\.$//g
  :%s/'$//g
  :%s/^lcd.*/&'/g
  :%s/^\//cd '\//g
  :%s/^cd.*/&\/'/g
  :%s/.*.txt\n\n/put &/g
  :%s/.*.csv\n\n/put &/g
  :$s/.*/put &/g
  :g/^Prod/d
  :g/^AEG/d
  :1g/^$/d
  :2g/.*/t$
  :1,$-1g/.*ftp.*/d
endfunction


"  Assumes the buffer contains the failure from ftp logs in the form of
"  Date - Info - Uploading file <localfile> to <remotefile>
"  Function attempts to break down input into lcd, cd and put commands for batch processing
function TFtp ()
  :%s/^.*Uploading /Uploading /g
  :%s/ to /\r/g
  :%s/^Uploading.*$/\r&/g
  :%s/\/AEG_.*/\r&/g
  :%s/\/Houston_.*/\r&/g
  :%s/\/TropLV.*/\r&/g
  :%s/\/Prod.*/\r&/g
  :%s/^\///g
  :%s/'ftp.*21/&\r/g
  :%s/^Uploading file '/lcd '/g
  :%s/\.$//g
  :%s/'$//g
  :%s/^lcd.*/&'/g
  :%s/^\//cd '\//g
  :%s/^cd.*/&\/'/g
  :%s/.*.txt\n\n/put &/g
  :%s/.*.csv\n\n/put &/g
  :$s/.*/put &/g
  :g/^Prod/d
  :g/^AEG/d
  :1g/^$/d
  :2g/.*/t$
  :1,$-1g/.*sftp.*/d
endfunction


"  Assumes buffer contains copy and paste from results of scheduled reports page
"  Function gets rid of clutter
function ModSchdResults()
  :%g/^   View Results      $/d
  :%g/^Chart Debug$/d
endfunction

"  Assumes buffer contains 'paste' of patterns and matches
"  Functions takes buffer and converts to a sed script that will highlight checks in 
"  Outbox versions copy and paste from nagios (copy and paste converted to html by vim)
function GenVerSed1()
  :%s/\t/\t-/
  :%s/$/-/
  :%s/^/s\/got /
  :%s/\t/\/got <font color="green">/g
  :%s/$/<\\\/font>\// 
endfunction


"  Assumes buffer contains 'paste' of patterns and matches
"  Functions takes buffer and converts to a sed script that will highlight non compliant checks
"  Outbox versions copy and paste from nagios (copy and paste converted to html by vim)
function GenVerSed2()
  :%s/\(^.*-\)\([0-9].*\)\(\t\)\(.*\)/s\/got \1\\(.* \\)\/got <font color="yellow">\1\\1 [\4]<\\\/font>\/
endfunction

"  Assumes buffer contains 'paste' of patterns and matches
"  Functions takes buffer and converts to a sed script that will change previous green only checks to full versions
"  Outbox versions copy and paste from nagios (copy and paste converted to html by vim)
function GenVerSed3()
  :%s/\(^.*\)\(\t\)\(.*\)/s\/-\3-\/\1 [\3]\//
endfunction
